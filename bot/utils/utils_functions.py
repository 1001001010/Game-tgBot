# - *- coding: utf- 8 - *-
import configparser
import time
from datetime import datetime
from typing import Union
import pytz
import uuid
import random
from bot.data.config import lang_en, lang_ru, game_slots, db, BOT_TIMEZONE
from bot.data.loader import bot

def get_admins():
    """ –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

    Returns:
        admins: –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    """
    read_admins = configparser.ConfigParser()
    read_admins.read("settings.ini")

    admins = read_admins['settings']['admin_id'].strip().replace(" ", "")

    if "," in admins:
        admins = admins.split(",")
    else:
        if len(admins) >= 1:
            admins = [admins]
        else:
            admins = []

    while "" in admins:
        admins.remove("")
    while " " in admins:
        admins.remove(" ")

    admins = list(map(int, admins))

    return admins

def get_unix(full=False):
    """ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ unix –≤—Ä–µ–º–µ–Ω–∏

    Args:
        full (bool, optional): –ü–æ–ª–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–µ—Ç. Defaults to False.

    Returns:
        time: –¢–µ–∫—É—â–µ–µ unix –≤—Ä–µ–º—è
    """
    if full:
        return time.time_ns()
    else:
        return int(time.time())

async def send_admins(msg, photo=None, file=None):
    """ –†–∞—Å—Å—ã–ª–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º

    Args:
        msg (string): –°–æ–æ–±—â–µ–Ω–∏–µ
        photo (string, optional): –§–æ—Ç–æ. Defaults to None.
        file (string, optional): –§–∞–π–ª. Defaults to None.
    """
    for admin in get_admins():
        if photo:
            await bot.send_photo(chat_id=admin, photo=photo, caption=msg)
        elif file:
            await bot.send_document(chat_id=admin, document=file, caption=msg)
        else:
            await bot.send_message(chat_id=admin, text=msg)
            
async def get_language(user_id):
    """ –ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞

    Args:
        user_id (string): –ê–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        lang: –Ø–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    lang = (await db.get_user(user_id=user_id))['language']
    if lang == "ru":
        return lang_ru
    elif lang == "en":
        return lang_en

def ded(get_text: str) -> str:
    """ –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç—Å—Ç—É–ø–æ–≤ –≤ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–π —Å—Ç—Ä–æ–∫–µ ('''text''')

    Args:
        get_text (str): _description_

    Returns:
        get_text: –¢–µ–∫—Å—Ç –±–µ–∑ –æ—Ç—Å—Ç—É–ø–æ–≤
    """
    if get_text is not None:
        split_text = get_text.split("\n")
        if split_text[0] == "": split_text.pop(0)
        if split_text[-1] == "": split_text.pop()
        save_text = []

        for text in split_text:
            while text.startswith(" "):
                text = text[1:].strip()

            save_text.append(text)
        get_text = "\n".join(save_text)
    else:
        get_text = ""

    return get_text


async def update_profit_day():
    """ 
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–ª–µ 00:00
    """
    await db.update_settings(profit_day=get_unix())

async def update_profit_week():
    """ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 00:00
    """
    await db.update_settings(profit_week=get_unix())
    
def convert_date(from_time, full=True, second=True) -> Union[str, int]:
    """ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ unix –≤ –¥–∞—Ç—É –∏ –æ–±—Ä–∞—Ç–Ω–æ

    Args:
        from_time : –í—Ä–µ–º—è
        full (bool, optional): –ü–æ–ª–Ω–æ–µ unix –≤—Ä–µ–º—è –∏–ª–∏ –Ω–µ—Ç. Defaults to True.
        second (bool, optional): –° –°–µ–∫—É–Ω–¥–∞–º–∏. Defaults to True.

    Returns:
        Union[str, int]: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    """

    if "-" in str(from_time):
        from_time = from_time.replace("-", ".")

    if str(from_time).isdigit():
        if full:
            to_time = datetime.fromtimestamp(from_time, pytz.timezone(BOT_TIMEZONE)).strftime("%d.%m.%Y %H:%M:%S")
        elif second:
            to_time = datetime.fromtimestamp(from_time, pytz.timezone(BOT_TIMEZONE)).strftime("%d.%m.%Y %H:%M")
        else:
            to_time = datetime.fromtimestamp(from_time, pytz.timezone(BOT_TIMEZONE)).strftime("%d.%m.%Y")
    else:
        if " " in str(from_time):
            cache_time = from_time.split(" ")

            if ":" in cache_time[0]:
                cache_date = cache_time[1].split(".")
                cache_time = cache_time[0].split(":")
            else:
                cache_date = cache_time[0].split(".")
                cache_time = cache_time[1].split(":")

            if len(cache_date[0]) == 4:
                x_year, x_month, x_day = cache_date[0], cache_date[1], cache_date[2]
            else:
                x_year, x_month, x_day = cache_date[2], cache_date[1], cache_date[0]

            x_hour, x_minute, x_second = cache_time[0], cache_time[1], cache_time[2]

            from_time = f"{x_day}.{x_month}.{x_year} {x_hour}:{x_minute}:{x_second}"
        else:
            cache_date = from_time.split(".")

            if len(cache_date[0]) == 4:
                x_year, x_month, x_day = cache_date[0], cache_date[1], cache_date[2]
            else:
                x_year, x_month, x_day = cache_date[2], cache_date[1], cache_date[0]

            from_time = f"{x_day}.{x_month}.{x_year}"

        if " " in str(from_time):
            to_time = int(datetime.strptime(from_time, "%d.%m.%Y %H:%M:%S").timestamp())
        else:
            to_time = int(datetime.strptime(from_time, "%d.%m.%Y").timestamp())

    return to_time

def func__arr_game(game_name, lang):
    """ –†–∞–±–æ—Ç–∞ —Å –º–∞—Å—Å–∏–≤–æ–º –∏–≥—Ä—ã

    Args:
        game_name (string): –ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã
        lang (string): –Ø–∑—ã–∫

    Returns:
        game_name_text: –ü–æ–ª—É—á–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã
    """
    english_game_name = game_name
    russian_game_name = game_slots.get(english_game_name)
    game_name_text = getattr(lang, russian_game_name)
     
    return game_name_text

def is_number_2(get_number: Union[str, int, float]) -> bool:
    """ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞ —á–∏—Å–ª–æ

    Args:
        get_number (Union[str, int, float]): –í–≤–µ–¥–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞

    Returns:
        bool: –Ø–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —á–∏—Å–ª–æ–º –∏–ª–∏ –Ω–µ—Ç
    """
    if str(get_number).isdigit():
        return True
    else:
        if "," in str(get_number): get_number = str(get_number).replace(",", ".")
        try:
            float(get_number)
            return True
        except ValueError:
            return False
        
def is_number(get_number: Union[str, int, float]) -> bool:
    """ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞ —á–∏—Å–ª–æ

    Args:
        get_number (Union[str, int, float]): –í–≤–µ–¥–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞

    Returns:
        bool: –Ø–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —á–∏—Å–ª–æ–º –∏–ª–∏ –Ω–µ—Ç
    """
    if str(get_number).isdigit():
        return True
    else:
        # if "," in str(get_number): get_number = str(get_number).replace(",", ".")
        # try:
        #     float(get_number)
        #     return True
        # except ValueError:
            return False

def convert_ref(lang, ref):
    """ –°–∫–ª–æ–Ω–µ–Ω–∏–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤–∞

    Args:
        lang (string): —è–∑—ã–∫
        ref (integer): –∫–æ–ª-–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤

    Returns:
        refs: –°–∫–ª–æ–Ω–µ–Ω–∏–µ
    """
    ref = int(ref)
    refs = lang.ref_s

    if ref % 10 == 1 and ref % 100 != 11:
        count = 0
    elif 2 <= ref % 10 <= 4 and (ref % 100 < 10 or ref % 100 >= 20):
        count = 1
    else:
        count = 2

    return f"{refs[count]}" 

def gen_id(len_id: int = 16) -> int:
    """ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∞–π–¥–∏

    Args:
        len_id (int, optional): –î–ª–∏–Ω–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–π–¥–∏. Defaults to 16.

    Returns:
        int: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞–π–¥–∏
    """
    mac_address = uuid.getnode()
    time_unix = int(str(time.time_ns())[:len_id])
    random_int = int(''.join(random.choices('0123456789', k=len_id)))

    return mac_address + time_unix + random_int

async def autobackup_db():
    """ 
    –ê–≤—Ç–æ–±—ç–∫–∞–ø –ë–î
    """
    db_path = "bot/data/database.db"
    with open(db_path, "rb") as data:
        for admin in get_admins():
            await bot.send_document(chat_id=admin, document=data, caption="<b>üíæ –ê–≤—Ç–æ–ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö üßÆ</b>")